"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import {
  FileText,
  Users,
  BookOpen,
  ListTree,
  Network,
  MessageSquare,
  Send,
  Loader2,
  RefreshCw,
  Lightbulb,
} from "lucide-react"
import { PanelRSummary } from "@/components/panels/panel-r-summary"
import { PanelRVisualize } from "@/components/panels/panel-r-visualize"
import { PanelRChat } from "@/components/panels/panel-r-chat"

interface AnalysisPanelProps {
  pdfPath: string | null
}

export function AnalysisPanel({ pdfPath }: AnalysisPanelProps) {
  const [activeTab, setActiveTab] = useState("summary")
  const [loading, setLoading] = useState(false)
  const [question, setQuestion] = useState("")
  const [chatMessages, setChatMessages] = useState<Array<{ role: "user" | "assistant"; content: string }>>([])

  // Simulate loading analysis when a new PDF is selected
  useEffect(() => {
    if (pdfPath) {
      setLoading(true)
      // Reset chat messages when a new PDF is loaded
      setChatMessages([])

      // Simulate analysis loading
      setTimeout(() => {
        setLoading(false)
      }, 2000)
    }
  }, [pdfPath])

  const handleQuestionSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (!question.trim()) return

    // Add user message
    setChatMessages((prev) => [...prev, { role: "user", content: question }])

    // Simulate AI response
    setLoading(true)
    setTimeout(() => {
      setChatMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          content: `This is a simulated response to your question: "${question}". In a real implementation, this would be generated by an LLM based on the PDF content.`,
        },
      ])
      setLoading(false)
      setQuestion("")
    }, 1500)
  }

  return (
    <div className="flex flex-col h-full">
      <div className="p-4 border-b">
        <h2 className="font-semibold mb-2">Document Analysis</h2>
        {pdfPath ? (
          <p className="text-sm text-muted-foreground truncate">Analyzing: {pdfPath.split("/").pop()}</p>
        ) : (
          <p className="text-sm text-muted-foreground">No document selected</p>
        )}
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
        <TabsList className="grid grid-cols-3 mx-4 mt-2">
          <TabsTrigger value="summary" className="flex items-center gap-1">
            <FileText size={14} />
            <span className="hidden sm:inline">Summary</span>
          </TabsTrigger>
          <TabsTrigger value="visualize" className="flex items-center gap-1">
            <Network size={14} />
            <span className="hidden sm:inline">Visualize</span>
          </TabsTrigger>
          <TabsTrigger value="chat" className="flex items-center gap-1">
            <MessageSquare size={14} />
            <span className="hidden sm:inline">Chat</span>
          </TabsTrigger>
        </TabsList>
        <TabsContent value="summary">
          <PanelRSummary pdfPath={pdfPath} loading={loading} />
        </TabsContent>
        <TabsContent value="visualize">
          <PanelRVisualize pdfPath={pdfPath} loading={loading} />
        </TabsContent>
        <TabsContent value="chat">
          <PanelRChat pdfPath={pdfPath} loading={loading} question={question} setQuestion={setQuestion} chatMessages={chatMessages} handleQuestionSubmit={handleQuestionSubmit} />
        </TabsContent>
      </Tabs>
    </div>
  )
}
